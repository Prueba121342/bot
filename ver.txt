from fastapi import FastAPI, HTTPException
from cachetools import TTLCache
from concurrent.futures import ThreadPoolExecutor
from selenium import webdriver
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import asyncio
import uvicorn

# Inicializa la aplicación de FastAPI
app = FastAPI()

# Cache para almacenar resultados durante 5 minutos
cache = TTLCache(maxsize=1000, ttl=300)

# WebDriver global para evitar reinicios
webdriver_instance = None

# Función para iniciar el WebDriver de Selenium
def iniciar_webdriver():
    global webdriver_instance
    if webdriver_instance is None:
        edge_options = EdgeOptions()
        edge_options.use_chromium = True
        edge_options.add_argument('--disable-gpu')
        edge_options.add_argument('--no-sandbox')
        edge_options.add_argument('--disable-dev-shm-usage')
        edge_options.add_argument('--headless')  # Ejecutar en modo headless
        edge_options.add_argument('--disable-images')  # Desactivar imágenes
        edge_options.add_argument('--disable-extensions')
        edge_options.add_argument('--disable-blink-features=AutomationControlled')
        service = EdgeService('C:/Users/githu/OneDrive/Desktop/a/msedgedriver.exe')
        webdriver_instance = webdriver.Edge(service=service, options=edge_options)

# Evento para cerrar el WebDriver cuando se apague el servidor
@app.on_event("shutdown")
def cerrar_webdriver():
    global webdriver_instance
    if webdriver_instance:
        webdriver_instance.quit()
        webdriver_instance = None

# Función para verificar el operador usando Selenium
def verificar_operador(numero_telefono):
    global webdriver_instance
    iniciar_webdriver()
    driver = webdriver_instance

    try:
        driver.get('https://www.ding.com/es/paises/america-del-sur/peru')

        # Cerrar el banner de cookies si aparece
        try:
            cookies_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.ID, 'onetrust-accept-btn-handler'))
            )
            cookies_button.click()
        except:
            pass  # Si no aparece, continúa

        # Introducir el número de teléfono y verificar el operador
        telefono_input = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//input[@placeholder='Introduce el número de teléfono']"))
        )
        telefono_input.clear()
        telefono_input.send_keys(numero_telefono)

        boton_recarga = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "button[data-testid='button-country-widget']"))
        )
        boton_recarga.click()

        lapiz_editar = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "div[data-testid='summary-product-edit-button']"))
        )
        lapiz_editar.click()

        operador_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "p[data-testid='summary-operator-content-value-typography']"))
        )
        operador = operador_element.text.strip()
        return operador

    except Exception as e:
        print(f"Error: {e}")
        return None

# Endpoint para consultar el operador
@app.get("/vernum/{numero_telefono}")
async def get_operador(numero_telefono: str):
    # Verifica si el resultado ya está en caché
    if numero_telefono in cache:
        return {"numero": numero_telefono, "operador": cache[numero_telefono]}

    # Ejecuta Selenium en un hilo separado
    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor(max_workers=5) as pool:
        operador = await loop.run_in_executor(pool, verificar_operador, numero_telefono)

    if operador:
        cache[numero_telefono] = operador  # Almacena en caché
        return {"numero": numero_telefono, "operador": operador}
    else:
        raise HTTPException(status_code=500, detail="No se pudo determinar el operador.")

# Iniciar el servidor al ejecutar este archivo
if __name__ == "__main__":
    uvicorn.run("vernum2:app", host="127.0.0.1", port=8000, reload=True)
